
DECLARE @DatabaseVersion nvarchar(20)=N'NoVer';
IF (Object_Id('${flyway:defaultSchema}.${flyway:Table}') IS NOT NULL)
 SELECT @DatabaseVersion=CASE
  WHEN ( -- check whether we are dealing with an UNDO
    SELECT  type
          FROM ${flyway:defaultSchema}.${flyway:Table} 
          WHERE
          installed_rank =
            (SELECT Max(installed_rank) 
             FROM ${flyway:defaultSchema}.${flyway:Table} 
               WHERE success = 1)
      ) LIKE 'UNDO%' /* IF so then we need to get the 
      next version before the UNDO version */
  THEN -- if it is an UNDO
    (SELECT  TOP 1  Version FROM ${flyway:defaultSchema}.${flyway:Table} 
      where version is not NULL -- probably a pesky repeatable
      and success = 1 
      AND TYPE NOT LIKE 'UNDO%' 
       AND installed_Rank<( /*the latest migration that is lower
       then the version quoted in the UNDO operation which is 
       actually the version you are undoing */
        select min(installed_rank)
          FROM ${flyway:defaultSchema}.${flyway:Table} 
          where version =
            (          
            Select version
              FROM ${flyway:defaultSchema}.${flyway:Table} 
              WHERE
              installed_rank =
                (SELECT Max(installed_rank) 
                 FROM ${flyway:defaultSchema}.${flyway:Table} 
                   WHERE success = 1
              )
            )
          and success = 1 )
      ORDER BY installed_rank desc
    )          
  ELSE -- then it is simple
    (Select version
        FROM ${flyway:defaultSchema}.${flyway:Table} 
        WHERE
        installed_rank =
          (SELECT Max(installed_rank) 
           FROM ${flyway:defaultSchema}.${flyway:Table} 
             WHERE success = 1
        )
    )  
  END
  
DECLARE @backupstring NVARCHAR(4000);
/*
insert the backup string generated by the SQL Backup GUI here, but
use the ${flyway:database} placeholder */
SET @backupstring =
  N'-SQL "BACKUP DATABASE ${flyway:database} TO DISK = ''C:\Program Files\Microsoft SQL Server\MSSQL13.MSSQLSERVER\MSSQL\Backup\<AUTO>_'
  + @DatabaseVersion
  + N'.sqb'' WITH FILEOPTIONS = 4, PASSWORD = ''<OBFUSCATEDPASSWORD>Sze2ZdjGb2bgve00qg==</OBFUSCATEDPASSWORD>'', CHECKSUM, '
  + N'DISKRETRYINTERVAL = 30, DISKRETRYCOUNT = 10, COMPRESSION = 4, COPYTO = ''\\millarchive\public\databaseBackups\Philf01'', INIT, KEYSIZE = 256, THREADCOUNT = 2"';
DECLARE @exitcode INT; --output variable
DECLARE @sqlerrorcode INT; --output variable
/* we use a string to list all the databases that we want to back up
*/
EXEC master..sqlbackup @backupstring, @exitcode OUTPUT, @sqlerrorcode OUTPUT;
IF (@exitcode <> 0) OR (@sqlerrorcode <> 0)
  BEGIN
    RAISERROR (
      'SQL Backup job failed with exitcode: %d SQL error code: %d',
      16, 1, @exitcode, @sqlerrorcode);
  END;

