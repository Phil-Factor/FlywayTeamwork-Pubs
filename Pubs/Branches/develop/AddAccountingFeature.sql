/*
Deployment script for My_Database 
This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/
GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;
SET NUMERIC_ROUNDABORT OFF;
GO
/*
*/
GO
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
GO
PRINT N'Creating Table [accounting].[Bill_Lines]...';
GO
CREATE TABLE [accounting].[Bill_Lines] (
    [id]                        INT             NOT NULL,
    [line_amount]               DECIMAL (20, 2) NOT NULL,
    [bill_id]                   INT             NULL,
    [line_Chart_of_Accounts_id] INT             NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);
GO
PRINT N'Creating Table [accounting].[Bill_Payments]...';
GO
CREATE TABLE [accounting].[Bill_Payments] (
    [id]                   INT             NOT NULL,
    [tran_date]            DATE            NOT NULL,
    [description]          NVARCHAR (MAX)  NULL,
    [reference]            NVARCHAR (MAX)  NULL,
    [total]                DECIMAL (20, 2) NOT NULL,
    [Chart_of_Accounts_id] INT             NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);
GO
PRINT N'Creating Table [accounting].[Bills]...';
GO
CREATE TABLE [accounting].[Bills] (
    [id]                   INT             NOT NULL,
    [tran_date]            DATE            NOT NULL,
    [due_date]             DATE            NULL,
    [description]          NVARCHAR (MAX)  NULL,
    [reference]            NVARCHAR (MAX)  NULL,
    [total]                DECIMAL (10, 2) NOT NULL,
    [status]               SMALLINT        NULL,
    [supplier_id]          INT             NULL,
    [bill_payment_id]      INT             NULL,
    [Chart_of_Accounts_id] INT             NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);
GO
PRINT N'Creating Table [accounting].[Chart_of_Accounts]...';
GO
CREATE TABLE [accounting].[Chart_of_Accounts] (
    [id]   INT          NOT NULL,
    [Name] VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([id] ASC),
    UNIQUE NONCLUSTERED ([Name] ASC)
);
GO
PRINT N'Creating Table [accounting].[customer]...';
GO
CREATE TABLE [accounting].[customer] (
    [id]              INT      NOT NULL,
    [person_id]       INT      NULL,
    [organisation_id] INT      NULL,
    [CustomerFrom]    DATE     NOT NULL,
    [CustomerTo]      DATE     NULL,
    [ModifiedDate]    DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);
GO
PRINT N'Creating Table [accounting].[Invoice_Lines]...';
GO
CREATE TABLE [accounting].[Invoice_Lines] (
    [id]                        INT             NOT NULL,
    [line_amount]               DECIMAL (20, 2) NOT NULL,
    [invoice_id]                INT             NULL,
    [line_Chart_of_Accounts_id] INT             NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);
GO
PRINT N'Creating Table [accounting].[Invoice_Payments]...';
GO
CREATE TABLE [accounting].[Invoice_Payments] (
    [id]                   INT             NOT NULL,
    [tran_date]            DATE            NOT NULL,
    [description]          NVARCHAR (MAX)  NOT NULL,
    [reference]            NVARCHAR (MAX)  NOT NULL,
    [total]                DECIMAL (20, 2) NOT NULL,
    [Chart_of_Accounts_id] INT             NOT NULL,
    [ModifiedDate]         DATETIME        NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);
GO
PRINT N'Creating Table [accounting].[Invoices]...';
GO
CREATE TABLE [accounting].[Invoices] (
    [id]                   INT             NOT NULL,
    [tran_date]            DATE            NOT NULL,
    [due_date]             DATE            NULL,
    [description]          NVARCHAR (MAX)  NULL,
    [reference]            NVARCHAR (MAX)  NULL,
    [total]                DECIMAL (10, 2) NOT NULL,
    [status]               SMALLINT        NULL,
    [customer_id]          INT             NULL,
    [invoice_payment_id]   INT             NULL,
    [Chart_of_Accounts_id] INT             NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);
GO
PRINT N'Creating Table [accounting].[Received_Money_Lines]...';
GO
CREATE TABLE [accounting].[Received_Money_Lines] (
    [id]                        INT             NOT NULL,
    [line_amount]               DECIMAL (20, 2) NOT NULL,
    [received_money_id]         INT             NULL,
    [line_Chart_of_Accounts_id] INT             NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);
GO
PRINT N'Creating Table [accounting].[Received_Moneys]...';
GO
CREATE TABLE [accounting].[Received_Moneys] (
    [id]                   INT             NOT NULL,
    [tran_date]            DATE            NOT NULL,
    [description]          NVARCHAR (MAX)  NULL,
    [reference]            NVARCHAR (MAX)  NULL,
    [total]                DECIMAL (20, 2) NOT NULL,
    [customer_id]          INT             NOT NULL,
    [Chart_of_Accounts_id] INT             NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);
GO
PRINT N'Creating Table [accounting].[Spent_Money_Lines]...';
GO
CREATE TABLE [accounting].[Spent_Money_Lines] (
    [id]                        INT             NOT NULL,
    [line_amount]               DECIMAL (20, 2) NOT NULL,
    [spent_money_id]            INT             NULL,
    [line_Chart_of_Accounts_id] INT             NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);
GO
PRINT N'Creating Table [accounting].[Spent_Moneys]...';
GO
CREATE TABLE [accounting].[Spent_Moneys] (
    [id]                   INT             NOT NULL,
    [tran_date]            DATE            NOT NULL,
    [description]          NVARCHAR (MAX)  NULL,
    [reference]            NVARCHAR (MAX)  NULL,
    [total]                DECIMAL (20, 2) NOT NULL,
    [supplier_id]          INT             NULL,
    [Chart_of_Accounts_id] INT             NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);
GO
PRINT N'Creating Table [accounting].[Suppliers]...';
GO
CREATE TABLE [accounting].[Suppliers] (
    [id]           INT      NOT NULL,
    [supplier_id]  INT      NULL,
    [contact_id]   INT      NULL,
    [CustomerFrom] DATE     NOT NULL,
    [CustomerTo]   DATE     NULL,
    [ModifiedDate] DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);
GO
PRINT N'Creating Default Constraint unnamed constraint on [accounting].[customer]...';
GO
ALTER TABLE [accounting].[customer]
    ADD DEFAULT (getdate()) FOR [ModifiedDate];
GO
PRINT N'Creating Default Constraint unnamed constraint on [accounting].[Invoice_Payments]...';
GO
ALTER TABLE [accounting].[Invoice_Payments]
    ADD DEFAULT (getdate()) FOR [ModifiedDate];
GO
PRINT N'Creating Default Constraint unnamed constraint on [accounting].[Suppliers]...';
GO
ALTER TABLE [accounting].[Suppliers]
    ADD DEFAULT (getdate()) FOR [ModifiedDate];
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Bill_Lines]...';
GO
ALTER TABLE [accounting].[Bill_Lines] WITH NOCHECK
    ADD FOREIGN KEY ([line_Chart_of_Accounts_id]) REFERENCES [accounting].[Chart_of_Accounts] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Bill_Lines]...';
GO
ALTER TABLE [accounting].[Bill_Lines] WITH NOCHECK
    ADD FOREIGN KEY ([bill_id]) REFERENCES [accounting].[Bills] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Bill_Payments]...';
GO
ALTER TABLE [accounting].[Bill_Payments] WITH NOCHECK
    ADD FOREIGN KEY ([Chart_of_Accounts_id]) REFERENCES [accounting].[Chart_of_Accounts] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Bills]...';
GO
ALTER TABLE [accounting].[Bills] WITH NOCHECK
    ADD FOREIGN KEY ([Chart_of_Accounts_id]) REFERENCES [accounting].[Chart_of_Accounts] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Bills]...';
GO
ALTER TABLE [accounting].[Bills] WITH NOCHECK
    ADD FOREIGN KEY ([supplier_id]) REFERENCES [accounting].[Suppliers] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Bills]...';
GO
ALTER TABLE [accounting].[Bills] WITH NOCHECK
    ADD FOREIGN KEY ([bill_payment_id]) REFERENCES [accounting].[Bill_Payments] ([id]);
GO
PRINT N'Creating Foreign Key [accounting].[FK_person_id_Person_id]...';
GO
ALTER TABLE [accounting].[customer] WITH NOCHECK
    ADD CONSTRAINT [FK_person_id_Person_id] FOREIGN KEY ([person_id]) REFERENCES [people].[Person] ([person_ID]);
GO
PRINT N'Creating Foreign Key [accounting].[FK_organisation_id_organisation_id]...';
GO
ALTER TABLE [accounting].[customer] WITH NOCHECK
    ADD CONSTRAINT [FK_organisation_id_organisation_id] FOREIGN KEY ([organisation_id]) REFERENCES [people].[Organisation] ([organisation_ID]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Invoice_Lines]...';
GO
ALTER TABLE [accounting].[Invoice_Lines] WITH NOCHECK
    ADD FOREIGN KEY ([invoice_id]) REFERENCES [accounting].[Invoices] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Invoice_Lines]...';
GO
ALTER TABLE [accounting].[Invoice_Lines] WITH NOCHECK
    ADD FOREIGN KEY ([line_Chart_of_Accounts_id]) REFERENCES [accounting].[Chart_of_Accounts] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Invoice_Payments]...';
GO
ALTER TABLE [accounting].[Invoice_Payments] WITH NOCHECK
    ADD FOREIGN KEY ([Chart_of_Accounts_id]) REFERENCES [accounting].[Chart_of_Accounts] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Invoices]...';
GO
ALTER TABLE [accounting].[Invoices] WITH NOCHECK
    ADD FOREIGN KEY ([customer_id]) REFERENCES [accounting].[customer] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Invoices]...';
GO
ALTER TABLE [accounting].[Invoices] WITH NOCHECK
    ADD FOREIGN KEY ([invoice_payment_id]) REFERENCES [accounting].[Invoice_Payments] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Invoices]...';
GO
ALTER TABLE [accounting].[Invoices] WITH NOCHECK
    ADD FOREIGN KEY ([Chart_of_Accounts_id]) REFERENCES [accounting].[Chart_of_Accounts] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Received_Money_Lines]...';
GO
ALTER TABLE [accounting].[Received_Money_Lines] WITH NOCHECK
    ADD FOREIGN KEY ([received_money_id]) REFERENCES [accounting].[Received_Moneys] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Received_Money_Lines]...';
GO
ALTER TABLE [accounting].[Received_Money_Lines] WITH NOCHECK
    ADD FOREIGN KEY ([line_Chart_of_Accounts_id]) REFERENCES [accounting].[Chart_of_Accounts] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Received_Moneys]...';
GO
ALTER TABLE [accounting].[Received_Moneys] WITH NOCHECK
    ADD FOREIGN KEY ([customer_id]) REFERENCES [accounting].[customer] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Received_Moneys]...';
GO
ALTER TABLE [accounting].[Received_Moneys] WITH NOCHECK
    ADD FOREIGN KEY ([Chart_of_Accounts_id]) REFERENCES [accounting].[Chart_of_Accounts] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Spent_Money_Lines]...';
GO
ALTER TABLE [accounting].[Spent_Money_Lines] WITH NOCHECK
    ADD FOREIGN KEY ([line_Chart_of_Accounts_id]) REFERENCES [accounting].[Chart_of_Accounts] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Spent_Money_Lines]...';
GO
ALTER TABLE [accounting].[Spent_Money_Lines] WITH NOCHECK
    ADD FOREIGN KEY ([spent_money_id]) REFERENCES [accounting].[Spent_Moneys] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Spent_Moneys]...';
GO
ALTER TABLE [accounting].[Spent_Moneys] WITH NOCHECK
    ADD FOREIGN KEY ([Chart_of_Accounts_id]) REFERENCES [accounting].[Chart_of_Accounts] ([id]);
GO
PRINT N'Creating Foreign Key unnamed constraint on [accounting].[Spent_Moneys]...';
GO
ALTER TABLE [accounting].[Spent_Moneys] WITH NOCHECK
    ADD FOREIGN KEY ([supplier_id]) REFERENCES [accounting].[Suppliers] ([id]);
GO
PRINT N'Creating Foreign Key [accounting].[FK_supplier_id_organisation_id]...';
GO
ALTER TABLE [accounting].[Suppliers] WITH NOCHECK
    ADD CONSTRAINT [FK_supplier_id_organisation_id] FOREIGN KEY ([supplier_id]) REFERENCES [people].[Organisation] ([organisation_ID]);
GO
PRINT N'Creating Foreign Key [accounting].[FK_contact_id_organisation_id]...';
GO
ALTER TABLE [accounting].[Suppliers] WITH NOCHECK
    ADD CONSTRAINT [FK_contact_id_organisation_id] FOREIGN KEY ([contact_id]) REFERENCES [people].[Organisation] ([organisation_ID]);
GO
PRINT N'Creating View [accounting].[Bill_Trans]...';
GO
CREATE VIEW accounting.Bill_Trans
AS
  WITH btrans
  AS (
     SELECT Convert (VARCHAR(10), b.id) AS tran_id, b.tran_date,
            b.Chart_of_Accounts_id AS ap_account,
            -- ABS(total) as total,
            c.Name, b.total, bl.id AS line_id, bl.line_Chart_of_Accounts_id,
            bl.line_amount, bp.id, bp.Chart_of_Accounts_id AS bank_account,
            'Business Bank Account' AS bank_name, b.status
       FROM
       accounting.Bills AS b
         LEFT JOIN accounting.Bill_Lines AS bl
           ON b.id = bl.bill_id
         LEFT JOIN accounting.Chart_of_Accounts AS c
           ON b.Chart_of_Accounts_id = c.id
         LEFT JOIN accounting.Bill_Payments AS bp
           ON b.bill_payment_id = bp.id)
  SELECT btrans.tran_id, btrans.tran_date, btrans.ap_account, btrans.Name,
         btrans.total, btrans.line_id, btrans.line_Chart_of_Accounts_id,
         btrans.line_amount, btrans.id, btrans.bank_account,
         btrans.bank_name, btrans.status,
         c.Name AS line_Chart_of_Accounts_name
    FROM
    btrans
      LEFT JOIN accounting.Chart_of_Accounts AS c
        ON btrans.line_Chart_of_Accounts_id = c.id;
GO
PRINT N'Creating View [accounting].[Invoice_Trans]...';
GO
CREATE VIEW accounting.Invoice_Trans
AS
  WITH itrans
  AS (
     SELECT Convert (VARCHAR(10), i.id) AS tran_id, i.tran_date,
            i.Chart_of_Accounts_id AS ar_account, c.Name, i.total,
            il.id AS line_id, il.line_Chart_of_Accounts_id, il.line_amount,
            ip.id, ip.Chart_of_Accounts_id AS bank_account,
            'Business Bank account' AS bank_name, i.status
       FROM
       accounting.Invoices AS i
         LEFT JOIN accounting.Invoice_Lines AS il
           ON i.id = il.invoice_id
         LEFT JOIN accounting.Chart_of_Accounts AS c
           ON i.Chart_of_Accounts_id = c.id
         LEFT JOIN accounting.Invoice_Payments AS ip
           ON i.invoice_payment_id = ip.id)
  SELECT itrans.*, c.Name AS line_Chart_of_Accounts_name
    FROM
    itrans
      LEFT JOIN accounting.Chart_of_Accounts AS c
        ON itrans.line_Chart_of_Accounts_id = c.id;
GO
PRINT N'Creating View [accounting].[Received_Money_Trans]...';
GO
CREATE VIEW accounting.Received_Money_Trans
AS
  SELECT 'RM' + Convert (VARCHAR(10), rm.id) AS tran_id, tran_date,
         Chart_of_Accounts_id,
         'Business Bank Account' AS Chart_of_Accounts_name, total,
         rml.id AS line_id, rml.line_Chart_of_Accounts_id,
         c.Name AS line_Chart_of_Accounts_name, rml.line_amount
    FROM
    accounting.Received_Moneys AS rm
      LEFT JOIN accounting.Received_Money_Lines AS rml
        ON rm.id = rml.received_money_id
      LEFT JOIN accounting.Chart_of_Accounts AS c
        ON c.id = rml.line_Chart_of_Accounts_id;
GO
PRINT N'Creating View [accounting].[Spent_Money_Trans]...';
GO
CREATE VIEW accounting.Spent_Money_Trans
AS
  SELECT 'SM' + Convert (VARCHAR(10), sm.id) AS tran_id, tran_date,
         Chart_of_Accounts_id,
         'Business Bank Account' AS Chart_of_Accounts_name, total,
         sml.id AS line_id, sml.line_Chart_of_Accounts_id,
         c.Name AS line_Chart_of_Accounts_name, sml.line_amount
    FROM
    accounting.Spent_Moneys AS sm
      LEFT JOIN accounting.Spent_Money_Lines AS sml
        ON sm.id = sml.spent_money_id
      LEFT JOIN accounting.Chart_of_Accounts AS c
        ON c.id = sml.line_Chart_of_Accounts_id;
--SELECT * from accounting.Spent_Money_Trans;
GO
PRINT N'Creating View [accounting].[Trial_Balance]...';
GO
CREATE VIEW accounting.Trial_Balance
AS
  SELECT line_Chart_of_Accounts_id AS acct_code,
         line_Chart_of_Accounts_name AS acct_name,
         (CASE WHEN Sum (line_amount) > 0 THEN Sum (line_amount) ELSE 0 END) AS debit_bal,
         (CASE WHEN Sum (line_amount) < 0 THEN Sum (line_amount) ELSE 0 END) AS credit_bal
    FROM accounting.Invoice_Trans
    GROUP BY
    line_Chart_of_Accounts_id, line_Chart_of_Accounts_name
  -- select all purchases
  UNION ALL
  SELECT line_Chart_of_Accounts_id AS acct_code,
         line_Chart_of_Accounts_name AS acct_name,
         (CASE WHEN Sum (line_amount) > 0 THEN Sum (line_amount) ELSE 0 END) AS debit_bal,
         (CASE WHEN Sum (line_amount) < 0 THEN Sum (line_amount) ELSE 0 END) AS credit_bal
    FROM accounting.Bill_Trans
    GROUP BY
    line_Chart_of_Accounts_id, line_Chart_of_Accounts_name
  -- select all received money
  UNION ALL
  SELECT line_Chart_of_Accounts_id AS acct_code,
         line_Chart_of_Accounts_name AS acct_name,
         (CASE WHEN Sum (line_amount) > 0 THEN Sum (line_amount) ELSE 0 END) AS debit_bal,
         (CASE WHEN Sum (line_amount) < 0 THEN Sum (line_amount) ELSE 0 END) AS credit_bal
    FROM accounting.Received_Money_Trans
    GROUP BY
    line_Chart_of_Accounts_id, line_Chart_of_Accounts_name
  -- select all spent money
  UNION ALL
  SELECT line_Chart_of_Accounts_id AS acct_code,
         line_Chart_of_Accounts_name AS acct_name,
         (CASE WHEN Sum (line_amount) > 0 THEN Sum (line_amount) ELSE 0 END) AS debit_bal,
         (CASE WHEN Sum (line_amount) < 0 THEN Sum (line_amount) ELSE 0 END) AS credit_bal
    FROM accounting.Spent_Money_Trans
    GROUP BY
    line_Chart_of_Accounts_id, line_Chart_of_Accounts_name
  -- select all AP
  UNION ALL
  SELECT Max (ap_account) AS acct_code,
         Max (line_Chart_of_Accounts_name) AS acct_name,
         - (CASE WHEN Sum (line_amount) < 0 THEN Sum (line_amount) ELSE 0 END) AS debit_bal,
         - (CASE WHEN Sum (line_amount) > 0 THEN Sum (line_amount) ELSE 0 END) AS credit_bal
    FROM accounting.Bill_Trans
    WHERE status = 0
  -- select all AR
  UNION ALL
  SELECT Max (ar_account) AS acct_code,
         Max (line_Chart_of_Accounts_name) AS acct_name,
         - (CASE WHEN Sum (line_amount) < 0 THEN Sum (line_amount) ELSE 0 END) AS debit_bal,
         - (CASE WHEN Sum (line_amount) > 0 THEN Sum (line_amount) ELSE 0 END) AS credit_bal
    FROM accounting.Invoice_Trans
    WHERE status = 0
  -- select all bill_payments
  UNION ALL
  SELECT Max (bank_account) AS acct_code, Max (bank_name) AS acct_name,
         - (CASE WHEN Sum (line_amount) < 0 THEN Sum (line_amount) ELSE 0 END) AS debit_bal,
         - (CASE WHEN Sum (line_amount) > 0 THEN Sum (line_amount) ELSE 0 END) AS credit_bal
    FROM accounting.Bill_Trans
    WHERE status = 1
  -- select all invoice_payments
  UNION ALL
  SELECT Max (bank_account) AS acct_code, Max (bank_name) AS acct_name,
         - (CASE WHEN Sum (line_amount) < 0 THEN Sum (line_amount) ELSE 0 END) AS debit_bal,
         - (CASE WHEN Sum (line_amount) > 0 THEN Sum (line_amount) ELSE 0 END) AS credit_bal
    FROM accounting.Invoice_Trans
    WHERE status = 1
  -- select all received_money
  UNION ALL
  SELECT Max (Chart_of_Accounts_id) AS acct_code,
         Max (Chart_of_Accounts_name) AS acct_name,
         - (CASE WHEN Sum (line_amount) < 0 THEN Sum (line_amount) ELSE 0 END) AS debit_bal,
         - (CASE WHEN Sum (line_amount) > 0 THEN Sum (line_amount) ELSE 0 END) AS credit_bal
    FROM accounting.Received_Money_Trans
  -- select all spent_money
  UNION ALL
  SELECT Max (Chart_of_Accounts_id) AS acct_code,
         Max (Chart_of_Accounts_name) AS acct_name,
         - (CASE WHEN Sum (line_amount) < 0 THEN Sum (line_amount) ELSE 0 END) AS debit_bal,
         - (CASE WHEN Sum (line_amount) > 0 THEN Sum (line_amount) ELSE 0 END) AS credit_bal
    FROM accounting.Spent_Money_Trans;
GO
PRINT N'Altering Extended Property [Database_Info]...';
GO
EXECUTE sp_updateextendedproperty @name = N'Database_Info', @value = N'[{"Name":"PubsDev","Version":"1.1.12","Description":"A sample team-based Flywayproject","Project":"Pubs","Modified":"2023-04-17T18:07:58.283","by":"PhilFactor"}]';
GO
PRINT N'Checking existing data against newly created constraints';
GO
ALTER TABLE [accounting].[customer] WITH CHECK CHECK CONSTRAINT [FK_person_id_Person_id];
ALTER TABLE [accounting].[customer] WITH CHECK CHECK CONSTRAINT [FK_organisation_id_organisation_id];
ALTER TABLE [accounting].[Suppliers] WITH CHECK CHECK CONSTRAINT [FK_supplier_id_organisation_id];
ALTER TABLE [accounting].[Suppliers] WITH CHECK CHECK CONSTRAINT [FK_contact_id_organisation_id];
GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);
SET NOCOUNT ON;
DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'accounting.Bill_Lines'), OBJECT_ID(N'accounting.Bill_Payments'), OBJECT_ID(N'accounting.Bills'), OBJECT_ID(N'accounting.Invoice_Lines'), OBJECT_ID(N'accounting.Invoice_Payments'), OBJECT_ID(N'accounting.Invoices'), OBJECT_ID(N'accounting.Received_Money_Lines'), OBJECT_ID(N'accounting.Received_Moneys'), OBJECT_ID(N'accounting.Spent_Money_Lines'), OBJECT_ID(N'accounting.Spent_Moneys'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);
DECLARE @schemaname AS NVARCHAR (256);
DECLARE @tablename AS NVARCHAR (256);
DECLARE @checkname AS NVARCHAR (256);
DECLARE @is_not_trusted AS INT;
DECLARE @statement AS NVARCHAR (1024);
BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH
IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;
IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;
SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];
IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END
SET NOCOUNT OFF;
DROP TABLE [#__checkStatus];
GO
PRINT N'Update complete.';
GO

