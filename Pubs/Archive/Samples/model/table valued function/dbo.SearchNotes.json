{
    "columns":  [
                    "TheOrder int",
                    "@TheStrings nvarchar(400)",
                    "theWord nvarchar(100)",
                    "context nvarchar(800)",
                    "Thekey int",
                    "TheDate datetime",
                    "InsertedBy nvarchar(100)"
                ],
    "Definition":  "/*\r\n*/\nCreate FUNCTION [dbo].[SearchNotes] (@TheStrings NVARCHAR(400))\r\n/**\r\nSummary: \u003e\r\n  This is the application interface, in that it provides the \r\n  context and works out if the user is specifying a string to\r\n  search for or a collection of words. It chooses to use one \r\n  of two search algorithms depending on whether it is given\r\n  a word or phrase to search for.\r\nAuthor: Phil Factor\r\nDate: Wednesday, 13 July 2022\r\nDatabase: PubsSearch- for the pubs project\r\nExamples:\r\n  - SELECT * FROM dbo.searchNotes(\u0027\"I\u0027\u0027ve tried calling\"\u0027)\r\n  - SELECT * FROM dbo.searchNotes(\u0027I\u0027\u0027ve tried calling\u0027)\r\nReturns: \u003e\r\n  a table of results, giving the context where the string was found and \r\n  thew key to the record.\r\n**/\r\nRETURNS @FoundInRecord TABLE\r\n  (TheOrder INT,\r\n   theWord NVARCHAR(100),\r\n   context NVARCHAR(800),\r\n   Thekey INT,\r\n   TheDate DATETIME,\r\n   InsertedBy NVARCHAR(100))\r\nAS\r\n  BEGIN\r\n    DECLARE @SearchResult TABLE\r\n      (TheOrder INT IDENTITY,\r\n       location INT,\r\n       Note INT,\r\n       hits INT);\r\n    DECLARE @InputWasAString INT;\r\n    SELECT @InputWasAString =\r\n    CASE WHEN LTrim(@TheStrings) LIKE \u0027[\u0027\u0027\"]%\u0027 AND RTrim(@TheStrings) LIKE \u0027%[\u0027\u0027\"]\u0027  THEN 1 ELSE 0 END;\r\n    /* the output of the search */\r\n    IF @InputWasAString = 0\r\n      INSERT INTO @SearchResult (location, Note, hits)\r\n        SELECT location, Note, hits FROM FindWords (@TheStrings);\r\n    ELSE\r\n      INSERT INTO @SearchResult (location, Note, hits)\r\n        SELECT location, note, hits FROM FindString (@TheStrings);\r\n    DECLARE @ii INT, @iiMax INT, @Location INT, @Key INT;\r\n    SELECT @ii = Min (TheOrder), @iiMax = Max (TheOrder) FROM @SearchResult;\r\n    WHILE (@ii \u003c= @iiMax)\r\n      BEGIN\r\n        SELECT @Location = location, @Key = Note FROM @SearchResult WHERE\r\n        TheOrder = @ii;\r\n        INSERT INTO @FoundInRecord\r\n          (TheOrder, theWord, context, Thekey, TheDate, InsertedBy)\r\n          SELECT @ii, @TheStrings,\r\n                 \u0027...\u0027 + Substring (Note, @Location - 70, 150) + \u0027...\u0027,\r\n                 @key, InsertionDate, InsertedBy\r\n            FROM people.Note\r\n            WHERE Note_id = @Key;\r\n        SELECT @ii = @ii + 1;\r\n      END;\r\n    RETURN;\r\n  END;",
    "documentation":  ""
}
