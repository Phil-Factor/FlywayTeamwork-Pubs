{
    "columns":  [
                    "@string varchar(100)",
                    "location int",
                    "note int",
                    "hits int"
                ],
    "Definition":  "CREATE FUNCTION [dbo].[FindString]\r\n  /*\r\nsummary:  \u003e\r\n This Table-valued function takes text as a parameter and \r\n tries to find it in the WordOccurence table\r\nexample:\r\n   - code: SELECT * FROM FindString(\u0027disgusting\u0027)\r\n   - code: SELECT TOP 10 note_id, Max(NoteStart) AS Note_Start, \r\n                 Max(InsertionDate)AS Insertion_Date, \r\n                 Max(InsertedBy) AS Inserted_by  \r\n             from \r\n\t         (SELECT note_id, NoteStart, InsertionDate, InsertedBy \r\n\t         FROM people.note NS\r\n\t         INNER JOIN FindString(\u0027despite trying all sorts\u0027) FW\r\n\t         ON FW.note=NS.note_id)f\r\n             group by Note_id\r\n             order by Max(InsertionDate) desc\r\nreturns:  \u003e\r\npasses back the location where they were found, and \r\nthe number of words matched in the string.\r\n**/\r\n  (@string VARCHAR(100))\r\nRETURNS @finds TABLE (location INT NOT NULL, note INT NOT NULL, hits INT NOT NULL)\r\nAS\r\n  BEGIN\r\n    DECLARE @WordsToLookUp TABLE\r\n      (\r\n      Item VARCHAR(255) NOT NULL,\r\n      location INT NOT NULL,\r\n      Sequence INT NOT NULL PRIMARY KEY\r\n      );\r\n    DECLARE @wordCount INT, @searches INT;\r\n    -- chop the string into its constituent words, with the sequence\r\n    INSERT INTO @WordsToLookUp (Item, location, Sequence)\r\n      SELECT Item, location, Sequence FROM dbo.IterativeWordChop(@string);\r\n    -- determine how many words and work out what proportion to search for\r\n    SELECT @wordCount = @@RowCount;\r\n    SELECT @searches =\r\n       CASE WHEN @wordCount \u003c 3 THEN @wordCount ELSE 2 + (@wordCount / 2) END;\r\n    IF @wordcount=1\r\n\t\tBEGIN\r\n\t\tINSERT INTO @finds (location, note, hits)\r\n\t\t\tSELECT MIN(location), note, 1 \r\n\t\t\t\tFROM people.wordoccurence WHERE item LIKE @string GROUP BY note\r\n        return\r\n\t\tEND \r\n    INSERT INTO @finds (location, Note, hits)\r\n      SELECT Min(WordOccurence.location), Note, Count(*) AS matches\r\n        FROM people.WordOccurence\r\n          INNER JOIN\r\n            (\r\n            SELECT TOP (@searches) Word.Item, searchterm.Sequence\r\n              FROM @WordsToLookUp searchterm\r\n                INNER JOIN people.Word\r\n                  ON searchterm.Item = Word.Item\r\n              ORDER BY frequency\r\n            ) LessFrequentWords(item, Sequence)\r\n            ON LessFrequentWords.item = WordOccurence.Item\r\n        GROUP BY WordOccurence.Sequence - LessFrequentWords.Sequence,\r\n        note\r\n        HAVING Count(*) \u003e= @searches\r\n        ORDER BY Count(*) DESC;\r\n    RETURN;\r\n  END;",
    "documentation":  ""
}
