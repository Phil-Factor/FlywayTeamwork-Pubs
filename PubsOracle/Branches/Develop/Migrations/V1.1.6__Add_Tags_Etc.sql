INSERT INTO dbo.publications (Publication_id, title, pub_id, notes, pubdate)
  SELECT title_id, title, pub_id, notes, pubdate FROM dbo.Titles;

INSERT INTO dbo.editions (publication_id, Publication_type, EditionDate)
  SELECT title_id, 'book', pubdate FROM dbo.Titles;

commit;
INSERT INTO dbo.prices (Edition_id, price, advance, royalty, ytd_sales,
PriceStartDate, PriceEndDate)
    with p 
    as
  (SELECT Edition_id, price, advance, royalty, ytd_sales, pubdate, NULL
    FROM dbo.Titles t
      INNER JOIN dbo.editions
        ON t.title_id = editions.publication_id)
   Select * from p;     

CREATE TABLE dbo.Newsales (
  stor_id CHAR(4 char)  NOT NULL,
  ord_num VARCHAR2(20 CHAR) NOT NULL,
  ord_date DATE NOT NULL,
  qty NUMBER(5,0) NOT NULL,
  payterms VARCHAR2(12 CHAR) NOT NULL,
  title_id VARCHAR2(6) NOT NULL REFERENCES  dbo.publications (publication_id),
	PRIMARY KEY (ord_num,stor_id,title_id),
	FOREIGN KEY (stor_id) REFERENCES dbo.stores (stor_id)

	);

INSERT INTO dbo.NewSales (stor_id, ord_num, title_id, ord_date, qty, payterms)
  SELECT stor_id, ord_num, title_id, ord_date, qty, payterms FROM dbo.sales;

DROP TABLE dbo.sales;
commit;
ALTER TABLE dbo.NewSales RENAME TO Sales;
commit;
DROP VIEW dbo.titleview;

CREATE TABLE dbo.Newtitleauthor (
	au_id nvarchar2(11 ) NOT NULL,
	title_id varchar2(6) NOT NULL,
	au_ord Number(3,0),
	royaltyper Number(10,0),
	FOREIGN KEY (au_id) REFERENCES dbo.authors (au_id),
   FOREIGN KEY (title_id) REFERENCES  dbo.publications (publication_id),
	PRIMARY KEY (au_id,title_id)
);

INSERT INTO dbo.NewTitleauthor(au_id, title_id, au_ord, royaltyper)
  SELECT au_id, title_id, au_ord, royaltyper FROM dbo.titleauthor; 
commit;
DROP TABLE dbo.titleauthor ;
ALTER TABLE dbo.Newtitleauthor  RENAME TO titleauthor;

CREATE TABLE dbo.Newroysched (
    roysched_id NUMBER(5,0) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1 MINVALUE 1 NOMAXVALUE,
	title_id varchar2(6) NOT NULL,
	lorange number(10,0),
	hirange number(10,0),
	royalty number(10,0),
	FOREIGN KEY (title_id) REFERENCES  dbo.publications (publication_id)
);

INSERT INTO dbo.Newroysched(title_id, lorange, hirange, royalty) 
SELECT title_id, lorange, hirange, royalty FROM dbo.roysched;
commit;
DROP TABLE dbo.roysched;
ALTER TABLE dbo.Newroysched  RENAME TO roysched;

/* the unique collection of types of book, with one primary tag, showing where
they should be displayed. No book can have more than one tag and should have at
least one.*/

CREATE TABLE dbo.TagName 
  (TagName_ID NUMBER(5,0) GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1 INCREMENT BY 1 MINVALUE 1 NOMAXVALUE primary key, 
     Tag VARCHAR(80) NOT NULL UNIQUE
     );


CREATE TABLE dbo.TagTitle
  /* relationship table allowing more than one tag for a publication */
  (
  title_id  varchar(6) NOT NULL,
  Is_Primary NUMBER(5,0) DEFAULT 0,
  TagName_ID NUMBER(5,0) NOT NULL,
	FOREIGN KEY (TagName_ID) REFERENCES dbo.TagName (TagName_ID),
   FOREIGN KEY (title_id) REFERENCES  dbo.publications (publication_id),
   PRIMARY KEY (title_id, TagName_ID)
  );

  INSERT INTO dbo.TagName (Tag) SELECT DISTINCT type FROM dbo.Titles;
commit;
INSERT INTO dbo.TagTitle (title_id,Is_Primary,TagName_ID)
  SELECT title_id, 1, TagName_ID FROM dbo.Titles 
    INNER JOIN dbo.TagName ON Titles.type = TagName.Tag;


DROP TABLE dbo.titles;
--now done by publications


CREATE VIEW dbo.titles
/* this view replaces the old TITLES table and shows only those books that represent each publication and only the current price */
AS
SELECT publications.Publication_id AS title_id, publications.title,
  Tag AS Type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate
  FROM dbo.publications
    INNER JOIN dbo.editions
      ON editions.publication_id = publications.Publication_id
     AND Publication_type = 'book'
    INNER JOIN dbo.prices
      ON prices.Edition_id = editions.Edition_id
    LEFT OUTER JOIN dbo.TagTitle
      ON TagTitle.title_id = publications.Publication_id
     AND TagTitle.Is_Primary = 1 --just the first, primary, tag
    LEFT OUTER JOIN dbo.TagName
      ON TagTitle.TagName_ID = TagName.TagName_ID
  WHERE prices.PriceEndDate IS NULL;

Create VIEW titleview
AS 
Select title, au_ord, au_lname, price, ytd_sales, pub_id
from dbo.titleauthor  inner join dbo.titles
on titles.title_id = titleauthor.title_id
inner join dbo.authors
on authors.au_id = titleauthor.au_id;



/*
create VIEW PublishersByPublicationType as
 A view to provide the number of each type of publication produced
by each publisher
SELECT Coalesce(publishers.pub_name, '---All types') AS publisher,
Sum(CASE WHEN Editions.Publication_type = 'AudioBook' THEN 1 ELSE 0 END) AS 'AudioBook',
Sum(CASE WHEN Editions.Publication_type ='Book' THEN 1 ELSE 0 END) AS 'Book',
Sum(CASE WHEN Editions.Publication_type ='Calendar' THEN 1 ELSE 0 END) AS 'Calendar',
Sum(CASE WHEN Editions.Publication_type ='Ebook' THEN 1 ELSE 0 END) AS 'Ebook',
Sum(CASE WHEN Editions.Publication_type ='Hardback' THEN 1 ELSE 0 END) AS 'Hardback',
Sum(CASE WHEN Editions.Publication_type ='Map' THEN 1 ELSE 0 END) AS 'Map',
Sum(CASE WHEN Editions.Publication_type ='Paperback' THEN 1 ELSE 0 END) AS 'PaperBack',
Count(*) AS total
 FROM publishers
INNER JOIN publications
ON publications.pub_id = publishers.pub_id
INNER JOIN editions ON editions.publication_id = publications.Publication_id
INNER JOIN prices ON prices.Edition_id = editions.Edition_id
WHERE prices.PriceEndDate IS null 
GROUP BY publishers.pub_name;
*/
	     