-- CREATE SCHEMA IF NOT EXISTS people;

--delete the table with all the foreign key references in it
 
DROP TABLE IF EXISTS People.EmailAddress; 
/* email address */
DROP TABLE IF EXISTS  People.Abode;
/* relates person to an address */
DROP TABLE IF EXISTS People.NotePerson;
/* who wrote the note */
DROP TABLE IF EXISTS People.Note;
/* correspondence */
DROP TABLE  IF EXISTS People.Phone;
/* all phone numbers */
DROP TABLE IF EXISTS People.CreditCard;
/* credit cards */

DROP TABLE IF EXISTS People.Person;
/* any type of person in the system */
DROP TABLE IF EXISTS People.Location;
DROP TABLE IF EXISTS People.organisation;
DROP TABLE IF EXISTS People.Address; 
/* all addresses */
DROP TABLE if exists People.AddressType ;
DROP TABLE if exists People.PhoneType ;

DROP DOMAIN IF EXISTS People.PersonalName;
DROP DOMAIN IF EXISTS People.PersonalTitle;
DROP DOMAIN IF EXISTS People.PersonalPhoneNumber;
DROP DOMAIN IF EXISTS People.PersonalAddressline;
DROP DOMAIN IF EXISTS People.PersonalLocation;
DROP DOMAIN IF EXISTS People.PersonalPostalCode;
DROP DOMAIN IF EXISTS People.PersonalSuffix;
DROP DOMAIN IF EXISTS People.PersonalNote;
DROP DOMAIN IF EXISTS People.PersonalPaymentCardNumber;
DROP DOMAIN IF EXISTS People.PersonalEmailAddress;
DROP DOMAIN IF EXISTS People.PersonalCVC;


CREATE DOMAIN People.PersonalName  national character varying (40);
CREATE DOMAIN People.PersonalTitle national character varying(10);
CREATE DOMAIN People.PersonalNote  text NOT null;
CREATE DOMAIN People.PersonalPhoneNumber national character varying(20);
CREATE DOMAIN People.PersonalAddressline national character varying(60);
CREATE DOMAIN People.PersonalLocation character varying(20);
CREATE DOMAIN People.PersonalPostalCode character varying (15);
CREATE DOMAIN People.PersonalEmailAddress  national character varying(40);
CREATE DOMAIN People.PersonalSuffix  national character varying(10);
CREATE DOMAIN People.PersonalPaymentCardNumber  character varying;
CREATE DOMAIN People.PersonalCVC CHAR(3);




CREATE TABLE People.Person 
/*  This table represents a person- can be a customer or a member of staff,or someone in one of the outsourced support agencies */
(
  person_ID INT GENERATED BY DEFAULT AS IDENTITY CONSTRAINT PersonIDPK PRIMARY KEY,--  has to be surrogate
  Title People.PersonalTitle null, -- the title (Mr, Mrs, Ms etc
  Nickname People.PersonalName null, -- the way the person is usually addressed
  FirstName People.PersonalName NOT null, -- the person's first name
  MiddleName People.PersonalName null, --any middle name 
  LastName People.PersonalName NOT null, -- the lastname or surname 
  Suffix People.PersonalSuffix NULL, --any suffix used by the person
  fullName national character varying (80) GENERATED ALWAYS AS  --A calculated column
    (Coalesce(Title || ' ', '') ||
     FirstName ||
     Coalesce(' ' || MiddleName, '') ||
     ' '||LastName|| Coalesce(' ' || Suffix, '')) STORED,
  LegacyIdentifier National Character Varying (30) NULL, --for more easily adding people in
  ModifiedDate timestamp NOT NULL --when the record was last modified
    CONSTRAINT PersonModifiedDateD DEFAULT now() --the current date by default
  );

CREATE INDEX SearchByPersonLastname /* this is an index associated with 
People.Person */
ON People.Person (LastName ASC, FirstName ASC);


/* This table represents a organisation- can be a People or a member of staff,
or someone in one of the outsourced support agencies*/
CREATE TABLE People.Organisation
  (
  organisation_ID INT GENERATED BY DEFAULT AS IDENTITY CONSTRAINT organisationIDPK PRIMARY KEY,--  has to be surrogate
  OrganisationName National Character Varying(100) NOT null,
  LineOfBusiness National Character Varying(100) NOT null,
  LegacyIdentifier National Character Varying(30) NULL, --for more easily adding people in
  ModifiedDate timestamp NOT NULL --when the record was last modified
    CONSTRAINT organisationModifiedDateD DEFAULT Now() --the current date by default
  );

CREATE INDEX SearchByOrganisationName /* this is an index associated with 
People.Organisation */
ON People.Organisation (OrganisationName ASC);

CREATE TABLE People.Address /*This contains the details of an addresss,
any address, it can be a home, office, factory or whatever */
  (
  Address_ID INT GENERATED BY DEFAULT AS IDENTITY /*surrogate key */ CONSTRAINT AddressPK PRIMARY KEY,--the unique key 
  AddressLine1 People.PersonalAddressline NULL, --first line address
  AddressLine2 People.PersonalAddressline NULL,/* second line address */
  City People.PersonalLocation NULL,/* the city */
  Region People.PersonalLocation NULL, /* Region or state */
  PostalCode People.PersonalPostalCode NULL, ---the zip code or post code
  country National Character Varying(50) NULL,
  LegacyIdentifier National Character Varying(30) NULL, --for more easily adding people in
  Full_Address Varchar (100) GENERATED ALWAYS AS (
    		coalesce(', ' || address.AddressLine1, '') ||
            Coalesce(', ' || address.AddressLine2, '') ||
            Coalesce(', ' || address.City, '') ||
            Coalesce(', ' || address.Region, '') ||
            Coalesce(', ' || address.PostalCode, '')
            )
           STORED,
  ModifiedDate timestamp NOT NULL --when the record was last modified
    CONSTRAINT AddressModifiedDateD DEFAULT Now(), --if necessary, now.
  CONSTRAINT Address_Not_Complete CHECK (Coalesce(
AddressLine1, AddressLine2, City, PostalCode
) IS NOT NULL
)
  );--check to ensure that the address was valid

CREATE TABLE People.AddressType 
/*  the�way that a particular customer is using�the address (e.g. home, office, hotel etc  */

  (
  TypeOfAddress National Character Varying(40) NOT NULL --description of the type of address
    CONSTRAINT TypeOfAddressPK PRIMARY KEY, --ensure that there are no duplicates
  ModifiedDate timestamp NOT NULL --when was this record LAST modified
    CONSTRAINT AddressTypeModifiedDateD DEFAULT Now()-- in case nobody fills it in
  );

CREATE TABLE People.Abode 
/*  an abode describes the association has with an�address and the period of time when the person had that association */
  (
  Abode_ID INT GENERATED BY DEFAULT AS IDENTITY --the surrogate key
     CONSTRAINT AbodePK PRIMARY KEY, --because it is the only unique column
  Person_id INT NOT NULL, --the id of the person
  Address_id INT NOT NULL, --the id of the address
  TypeOfAddress National Character Varying(40) NOT NULL, --the type of address
  Start_date timestamp NOT NULL, --when this relationship started 
  End_date timestamp NULL, --when this relationship ended
  ModifiedDate timestamp NOT NULL --when this record was last modified
     CONSTRAINT AbodeModifiedD DEFAULT Now(),--when the abode record was created/modified
  CONSTRAINT Abode_AddressFK FOREIGN KEY (address_id) REFERENCES People.Address,
  CONSTRAINT Abode_PersonFK FOREIGN KEY (person_id) REFERENCES People.Person,
  CONSTRAINT Abode_AddressTypeFK FOREIGN KEY (TypeOfAddress) REFERENCES People.AddressType(typeofaddress)
   );

CREATE TABLE People.Location /* an location describes the association has with an
organisation and  the period of time when the organisation had that association */
  (
  Location_ID INT GENERATED BY DEFAULT AS IDENTITY --the surrogate key
     CONSTRAINT LocationPK PRIMARY KEY, --because it is the only unique column
  organisation_id INT NOT NULL, --the id of the organisation
     --CONSTRAINT Location_organisationFK FOREIGN KEY REFERENCES People.organisation(organisation_id),
  Address_id INT NOT NULL, --the id of the address
     --CONSTRAINT Location_AddressFK FOREIGN KEY REFERENCES People.Address,
  TypeOfAddress National Character Varying(40) NOT NULL, --the type of address
     --CONSTRAINT Location_AddressTypeFK FOREIGN KEY REFERENCES People.AddressType,
  Start_date timestamp NOT NULL, --when this relationship started 
  End_date timestamp NULL, --when this relationship ended
  ModifiedDate timestamp NOT NULL --when this record was last modified
     CONSTRAINT LocationModifiedD DEFAULT Now(),--when the Location record was created/modified
  --no idea why Postgres insists on this syntax for this table
  FOREIGN KEY (Address_id) REFERENCES People.Address(Address_id),
  FOREIGN KEY (TypeOfAddress ) REFERENCES People.AddressType(TypeOfAddress),
  FOREIGN KEY (organisation_id) REFERENCES People.organisation(organisation_id)   
  );

/* the description of the type of the phone (e.g. Mobile, home, work) */
CREATE TABLE People.PhoneType
  (
  TypeOfPhone National Character Varying(40) NOT NULL
  --a description of the type of phone
    CONSTRAINT PhoneTypePK PRIMARY KEY,-- assures unique and indexed
  ModifiedDate timestamp NOT NULL --when this record was last modified
    CONSTRAINT PhoneTypeModifiedDateD DEFAULT Now()
	--when the abode record was created/modified
  );


CREATE TABLE People.Phone 
/* the actual phone number, and relates it to the person and the type of phone */
  (
  Phone_ID INT GENERATED BY DEFAULT AS IDENTITY --the surrogate key
    CONSTRAINT PhonePK PRIMARY KEY, --defunes the phone_id as being the primry key
  Person_id INT NOT NULL, --the person who has the phone number
    --CONSTRAINT Phone_PersonFK FOREIGN KEY REFERENCES People.Person,
  TypeOfPhone National Character Varying(40) NOT NULL, /*the type of phone*/
     --CONSTRAINT FOREIGN KEY REFERENCES People.PhoneType,
  DiallingNumber  People.PersonalPhoneNumber NOT null,--the actual dialling number 
  Start_date  timestamp NOT NULL, -- when we first knew thet the person was using the number
  End_date timestamp NULL, -- if not null, when the person stopped using the number
  ModifiedDate timestamp NULL --when the record was last modified
    CONSTRAINT PhoneModifiedDateD DEFAULT Now(),-- to make data entry easier!
  FOREIGN KEY (Person_id) REFERENCES People.Person(Person_id),
  FOREIGN KEY (TypeOfPhone) REFERENCES People.PhoneType(TypeOfPhone)
  );

CREATE TABLE People.Note 
/*  a note relating to a customer  */
  (
  Note_id INT GENERATED BY DEFAULT AS IDENTITY  CONSTRAINT NotePK PRIMARY KEY, --the surrogate primary key
  Note People.PersonalNote NOT null,
  NoteStart national character varying (900) GENERATED ALWAYS AS (
    Coalesce(left(note,860), 'Blank')) stored,
  	/*making it easier to search ...*/
  --CONSTRAINT NoteStartUQ UNIQUE,
  InsertionDate timestamp NOT NULL --when the note was inserted
    CONSTRAINT NoteInsertionDateDL DEFAULT Now(),
  InsertedBy national character varying (90) NOT NULL CONSTRAINT GetUserName DEFAULT CURRENT_USER, ---who inserted it
  /* we add a ModifiedDate as usual */
  ModifiedDate timestamp NOT NULL CONSTRAINT NoteModifiedDateD DEFAULT Now()
  );

CREATE TABLE People.NotePerson /* relates a note to a person */
  (
  NotePerson_id INT GENERATED BY DEFAULT AS IDENTITY CONSTRAINT NotePersonPK PRIMARY KEY,
  Person_id INT NOT NULL,
  --the person to whom the note applies
  Note_id INT NOT NULL,
  /* the note that applies to the person */
  InsertionDate timestamp NOT NULL /* whan the note was inserted */
    CONSTRAINT NotePersonInsertionDateD DEFAULT Now(),
  ModifiedDate timestamp NOT NULL /* whan the note was last modified */
    CONSTRAINT NotePersonModifiedDateD DEFAULT Now(),
  CONSTRAINT DuplicateUK UNIQUE (Person_id, Note_id, InsertionDate), 
  /* constraint to prevent duplicates*/
  CONSTRAINT NotePerson_PersonFK FOREIGN KEY (person_id) REFERENCES People.Person,
  CONSTRAINT NotePerson_NoteFK FOREIGN KEY  (Note_id) REFERENCES People.Note
  );


CREATE TABLE People.CreditCard 
/*  the customer''s credit card details. This is here just because this database is used as a nursery slope to check for personal information  */
(
  CreditCardID INT GENERATED BY DEFAULT AS IDENTITY NOT NULL CONSTRAINT CreditCardPK PRIMARY KEY,
  Person_id INT NOT NULL,
  CardNumber People.PersonalPaymentCardNumber NOT NULL CONSTRAINT CreditCardWasntUnique UNIQUE, 
  ValidFrom DATE NOT NULL,--from when the credit card was valid
  ValidTo DATE NOT NULL,--to when the credit card was valid
  CVC People.PersonalCVC NOT null,--the CVC
  ModifiedDate timestamp NOT NULL--when was this last modified
    CONSTRAINT CreditCardModifiedDateD DEFAULT (Now()),-- if not specified, it was now
    CONSTRAINT DuplicateCreditCardUK UNIQUE (Person_id, CardNumber), --prevend duplicate card numbers
    CONSTRAINT CreditCard_PersonFK FOREIGN KEY (Person_id) REFERENCES People.Person
  );
/* the email address for the person. a person can have more than one */
CREATE TABLE People.EmailAddress
  (
  EmailID INT GENERATED BY DEFAULT AS IDENTITY NOT NULL CONSTRAINT EmailPK PRIMARY KEY,--surrogate primary key 
  Person_id INT NOT NULL, /*
  make the connectiopn between the person and the email address */
  EmailAddress People.PersonalEmailAddress  NOT NULL, --the actual email address
  StartDate DATE NOT NULL DEFAULT (Now()),--when we first knew about this email address
  EndDate DATE NULL,--when the People stopped using this address
  ModifiedDate timestamp NOT NULL
    CONSTRAINT EmailAddressModifiedDateD DEFAULT (Now()),
  CONSTRAINT EmailAddress_PersonFK FOREIGN KEY (Person_id) REFERENCES People.Person  
  );

/* now we add the old data into the new framework */
INSERT INTO people.Person (legacyIdentifier, Title, Nickname, FirstName, MiddleName, LastName, Suffix)
SELECT 'au-'|| au_id, NULL, NULL, au_fname,NULL, au_lname, NULL FROM dbo.authors 
UNION ALL
SELECT 'em-'|| emp_id, NULL,NULL, fname, minit, lname, NULL  FROM dbo.employee;

INSERT INTO people.Address(legacyIdentifier, AddressLine2, City,Region,PostalCode, country)
SELECT  'au-' || au_id,address, city, state, zip,'USA' FROM dbo.authors;

INSERT INTO People.AddressType(TypeOfAddress) SELECT 'Home'
where NOT EXISTS (SELECT * FROM People.AddressType WHERE TypeOfAddress='Home');

INSERT INTO People.PhoneType (TypeOfPhone)
Select
  ('Home' -- TypeOfPhone - National Character Varying(40)
  )
WHERE NOT EXISTS (SELECT * FROM People.PhoneType WHERE TypeOfPhone='Home');

INSERT INTO People.Abode (Person_id, Address_id, TypeOfAddress, Start_date,
End_date, ModifiedDate)
select person_id, address_id, 'Home', Now(), NULL, Now()  
FROM People.Person
INNER JOIN People.Address 
ON Address.LegacyIdentifier = Person.LegacyIdentifier;
--add a 'Home' phone-type


INSERT INTO People.Phone (Person_id, TypeOfPhone, DiallingNumber, Start_date)
SELECT person_ID,'Home', phone, Now() FROM dbo.authors
INNER JOIN people.Person
ON Replace(LegacyIdentifier,'au-','')=au_id;


/* Now add the publishers 
*/
INSERT INTO people.Address(legacyIdentifier, AddressLine2, City,Region,PostalCode,Country)
SELECT  'pub-'|| pub_id, pub_name, city, state, NULL ,country FROM dbo.publishers;
--make sure the type of address in in-place
INSERT INTO People.AddressType(TypeOfAddress) SELECT 'Business'
where NOT EXISTS (SELECT * FROM People.AddressType WHERE TypeOfAddress='Business');
--add the publishers as organisations
INSERT INTO People.Organisation (OrganisationName, LineOfBusiness,
LegacyIdentifier, ModifiedDate)
SELECT  pub_name,'Publisher','pub-' || pub_id,Now() FROM dbo.publishers;
--now we add the publishers location in
INSERT INTO People.Location (organisation_id, Address_id, TypeOfAddress,Start_date)
SELECT organisation_ID,  Address_ID, 'Business',Now()
       FROM People.Organisation
INNER JOIN People.Address 
ON Address.LegacyIdentifier = organisation.LegacyIdentifier;

CREATE VIEW People.publishers
as
SELECT Replace (Address.LegacyIdentifier, 'pub-', '') AS pub_id,
  OrganisationName AS pub_name, City, Region AS state, country
  FROM People.Organisation
    INNER JOIN People.Location
      ON Location.organisation_id = Organisation.organisation_ID
    INNER JOIN People.Address
      ON Address.Address_ID = Location.Address_id
  WHERE LineOfBusiness = 'Publisher' AND End_date IS NULL;

CREATE VIEW People.authors
AS
SELECT Replace (Address.LegacyIdentifier, 'au-', '') AS au_id,
  LastName AS au_lname, FirstName AS au_fname, DiallingNumber AS phone,
  Coalesce (AddressLine1, '') || Coalesce (' ' || AddressLine2, '') AS address,
  City, Region AS state, PostalCode AS zip
  FROM People.Person
    INNER JOIN People.Abode
      ON Abode.Person_id = Person.person_ID
    INNER JOIN People.Address
      ON Address.Address_ID = Abode.Address_id
    LEFT OUTER JOIN People.Phone
	 ON Phone.Person_id = Person.person_ID
  WHERE People.Abode.End_date IS NULL 
  AND phone.End_date IS null
  AND Person.LegacyIdentifier LIKE 'au-%';


--SELECT @@TranCount
--ROLLBACK TRANSACTION
--SELECT object_schema_name(object_id)+'.'+name FROM sys.tables

